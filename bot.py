import logging
from telebot import TeleBot, types
from telebot.types import Message
from config import TOKEN_TG, MAX_TOKENS_IN_SESSION, ADMIN
from db import create_db, is_limit_users, is_limit_sessions, get_tokens_in_session, is_limit_tokens_in_session, create_user, insert_tokenizer_info, insert_prompt, insert_full_story, get_tokens_info
from gpt import count_tokens, ask_gpt, create_system_prompt
from keyboard import markup_menu, hideKeyboard, markup_genre, markup_start, markup_help, markup_generate, markup_limit
from text import Settings

db_file = "db.db"
db_conn = create_db(db_file)

log_file = "log.txt"
logging.basicConfig(
    level=logging.WARNING,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    datefmt="%F %T",
    filename=log_file,
    filemode="w",
)

bot = TeleBot(TOKEN_TG)

user_data = {}


def check_user(m):
    global user_data, db_conn

    user_id = m.from_user.id

    if user_id not in user_data:
        user_data[user_id] = {}
        user_data[user_id]['user_id'] = user_id

        user_data[user_id]['task'] = ""
        user_data[user_id]['answer'] = ""
        user_data[user_id]['busy'] = False
        user_data[user_id]['t_start'] = 0
        user_data[user_id]['t_result'] = 0


@bot.message_handler(commands=['start'])
def handle_start(m: Message):
    user_id = m.from_user.id
    check_user(m)
    bot.send_message(user_id, '‚úå –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–æ—á–∏–Ω–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π.\n\n'
        '–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é - –Ω–∞–ø–∏—à–∏ /help\n'
        '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å —Å–æ—á–∏–Ω—è—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å /story', reply_markup=markup_menu)

@bot.message_handler(commands=['help'])
def handle_help(m: Message):
    user_id = m.from_user.id
    check_user(m)
    bot.send_message(user_id, '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ãüìò:\n'
        '/tokens - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤–∞—à –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤, –∞ —Ç–∞–∫ –∂–µ –æ–±—â–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è\n'
        '/story - –Ω–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è, –≤–∞–º –Ω–∞ –≤—ã–±–æ—Ä –±—É–¥—É—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã: –∂–∞–Ω—Ä, –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –∞–Ω—Ç—É—Ä–∞–∂\n\n'
        '–ë–æ—Çü§ñ –Ω–∞ GitHub, - <a href="https://github.com/fallan-git/scenario-gpt-bot">–∫–ª–∞—Ü</a>\n',
        parse_mode="HTML", reply_markup=markup_help)


@bot.message_handler(commands=['debug'])
def handle_debug(m: Message):
    user_id = m.from_user.id
    check_user(m)
    logging.warning(f"{user_id}: get tokens statistics from TG-bot")

    if user_id in ADMIN:
        try:
            with open(log_file, "rb") as file:
                bot.send_document(user_id, file, reply_markup=markup_menu)
        except Exception:
            logging.error(f"{user_id}: cannot send log-file to tg-user")
            bot.send_message(user_id, '–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ª–æ–≥-—Ñ–∞–π–ª', reply_markup=markup_menu)
    else:
        bot.send_message(user_id, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!‚ùå', reply_markup=markup_menu)

@bot.message_handler(commands=['tokens'])
def handle_tokens(m: Message):
    global db_conn
    user_id = m.from_user.id
    check_user(m)
    logging.warning(f"{user_id}: –õ—é–±–æ–ø—ã—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ —Ç–æ–∫–µ–Ω—ã")

    bot.send_message(user_id, "\n".join(get_tokens_info(db_conn, user_data[user_id])), reply_markup=markup_menu)

@bot.message_handler(commands=['story'])
def handle_settings(m: Message):
    user_id = m.from_user.id
    check_user(m)
    bot.send_message(user_id, '–í—ã–±–µ—Ä–∏ —Å–Ω–∞—á–∞–ª–∞ –∂–∞–Ω—Ä, –ø–æ—Ç–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –ø–æ—Ç–æ–º –∞–Ω—Ç—É—Ä–∞–∂', reply_markup=markup_genre)
    bot.register_next_step_handler(m, settings_genre)


def settings_genre(m: Message):
    global db_conn, markup_genre, user_data
    user_id = m.from_user.id
    check_user(m)
    if m.text in list(Settings.keys()):
        user_data[user_id]['genre'] = m.text
        genre = user_data[user_id]['genre']
        characters = list(Settings[genre]['characters'])
        markup_characters = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup_characters.add(*characters)
        bot.send_message(
            user_id,
            '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞', reply_markup=markup_characters)
        bot.register_next_step_handler(m, settings_characters)
    else:
        bot.send_message(
            user_id,
            '–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∂–∞–Ω—Ä –∏–∑ —Å–ø–∏—Å–∫–∞!', reply_markup=markup_genre)
        bot.register_next_step_handler(m, settings_genre)

    return


def settings_characters(m: Message):
    global db_conn, markup_genre, user_data
    user_id = m.from_user.id
    check_user(m)
    genre = user_data[user_id]['genre']
    characters = list(Settings[genre]['characters'])
    entourages = list(Settings[genre]['entourages'])

    markup_characters = types.ReplyKeyboardMarkup(
        row_width=2,
        resize_keyboard=True)
    markup_characters.add(*characters)

    markup_entourages = types.ReplyKeyboardMarkup(
        row_width=2,
        resize_keyboard=True)
    markup_entourages.add(*entourages)

    if m.text in characters:
        user_data[user_id]['character'] = m.text
        bot.send_message(
            user_id,
            '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∞–Ω—Ç—É—Ä–∞–∂', reply_markup=markup_entourages)
        bot.register_next_step_handler(m, settings_entourages)
    else:
        bot.send_message(
            user_id,
            '–í—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ —Å–ø–∏—Å–∫–∞!', reply_markup=markup_characters)
        bot.register_next_step_handler(m, settings_characters)

    return


def settings_entourages(m: Message):
    global db_conn, markup_genre, user_data
    user_id = m.from_user.id
    check_user(m)
    genre = user_data[user_id]['genre']
    entourages = list(Settings[genre]['entourages'])

    markup_entourages = types.ReplyKeyboardMarkup(
        row_width=2,
        resize_keyboard=True)
    markup_entourages.add(*entourages)

    if m.text in entourages:
        user_data[user_id]['entourage'] = m.text
        bot.send_message(user_id, '–û—Ç–ª–∏—á–Ω–æ, –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫!\n\n'
            f'–ñ–∞–Ω—Ä: {user_data[user_id]["genre"]}\n'
            f'–ü–µ—Ä—Å–æ–Ω–∞–∂: {user_data[user_id]["character"]}\n'
            f'–ê–Ω—Ç—É—Ä–∞–∂: {user_data[user_id]["entourage"]}\n\n'
            '–ü–æ—Ä–∞ –≥–µ–Ω–µ—Ä–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π! /generate\n'
            '(–ü–æ–º–Ω–∏ –ø—Ä–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π –∏ —Ç–æ–∫–µ–Ω–æ–≤)', reply_markup=markup_start)
        return
    else:
        bot.send_message(
            user_id,
            '–í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞!', reply_markup=markup_entourages)
        bot.register_next_step_handler(m, settings_entourages)

    return


@bot.message_handler(commands=['generate'])
def handle_generate(m: Message):
    global db_conn, user_data, MAX_TOKENS_IN_SESSION
    user_id = m.from_user.id
    check_user(m)

    if is_limit_users(db_conn):
        logging.warning(f"MAX_USERS limit exceeded, user_id: {user_id}")
        bot.send_message(
            user_id,
            '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞!\n'
            '–î–ª—è –≤–∞—Å –¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ /tokens, –∞ —Ç–∞–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ /help', reply_markup=markup_limit)
        return False

    if is_limit_sessions(db_conn, user_id):
        logging.warning(f"MAX_SESSIONS limit exceeded, user_id: {user_id}")
        bot.send_message(
            user_id,
            '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π –Ω–∞ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n'
            '–î–ª—è –≤–∞—Å –¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤: /tokens, –∞ —Ç–∞–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ /help', reply_markup=markup_limit)
        return False

    if ('genre' not in user_data[user_id]
            or 'character' not in user_data[user_id]
            or 'entourage' not in user_data[user_id]):
        bot.send_message(
            user_id,
            '–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–π–¥–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: /story\n'
            '–¢–∞–º –≤—ã–±–µ—Ä–∏ —Å–Ω–∞—á–∞–ª–∞ –∂–∞–Ω—Ä, –ø–æ—Ç–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –ø–æ—Ç–æ–º –∞–Ω—Ç—É—Ä–∞–∂.', reply_markup=hideKeyboard)
    else:
        bot.send_message(
            user_id,
            f'–ñ–∞–Ω—Ä: {user_data[user_id]["genre"]}\n'
            f'–ü–µ—Ä—Å–æ–Ω–∞–∂: {user_data[user_id]["character"]}\n'
            f'–ê–Ω—Ç—É—Ä–∞–∂: {user_data[user_id]["entourage"]}\n\n'
            f''
            f'–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏: {MAX_TOKENS_IN_SESSION}', reply_markup=hideKeyboard)

        session_id = create_user(db_conn, user_data[user_id])

        if session_id:
            user_data[user_id]['session_id'] = session_id
            logging.warning(f"New session id={session_id} "
                            f"has been created: user_id={user_id}")

            user_data[user_id]['collection'] = []
            bot.send_message(
                user_id,
                '–í–≤–µ–¥–∏ –Ω–∞—á–∞–ª–æ –∑–∞–¥–∞—á–∏ (–æ–¥–Ω–æ-–¥–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è). '
                '–ë–æ—Ç-—Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Å—é–∂–µ—Ç. –ü–æ—Ç–æ–º —Å–Ω–æ–≤–∞ —Ç—ã.\n\n'
                '–ö–æ–≥–¥–∞ –Ω–∞–¥–æ–µ—Å—Ç - –Ω–∞–ø–∏—à–∏: –ö–æ–Ω–µ—Ü', reply_markup=markup_generate)
            bot.register_next_step_handler(m, handle_ask_gpt)

        else:
            logging.error(f"Cannot create new session: user_id={user_id}")
            bot.send_message(
                user_id,
                '–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é!\n'
                '–û–±—â–µ–Ω–∏–µ —Å GPT –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –±–µ–∑ —ç—Ç–æ–≥–æ.', reply_markup=hideKeyboard)
            return False


def handle_ask_gpt(m: Message):
    global user_data, db_conn
    user_id = m.from_user.id
    check_user(m)

    prompt_user_prefix = ("–ü—Ä–æ–¥–æ–ª–∂–∏ –æ–ø–∏—Å–∞–Ω–∏–µ, –Ω–æ –Ω–µ –ø–∏—à–∏ –Ω–∏–∫–∞–∫–æ–π "
                          "–ø–æ—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç —Å–µ–±—è: ")

    if m.text.lower() == '–∫–æ–Ω–µ—Ü':
        full_story = ""
        for row in user_data[user_id]['collection']:
            if row['role'] == 'system':
                continue
            full_story += row['content'].replace(prompt_user_prefix, "") + " "
        insert_full_story(db_conn, user_data[user_id], full_story)

        user_data[user_id]['collection'].clear()
        user_data[user_id]['genre'] = ""
        user_data[user_id]['character'] = ""
        user_data[user_id]['entourage'] = ""
        bot.send_message(
            user_id,
            f'–í–æ—Ç –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç, –ø–æ–ª—É—á–∏–ª—Å—è —Å –ø–æ–º–æ—â—å—é –±–æ—Ç–∞:\n\n'
            f'{full_story}\n\n'
            f'–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è! /story', reply_markup=markup_menu)
        bot.register_next_step_handler(m, handle_settings)
        return False

    if not len(user_data[user_id]['collection']):
        prompt_system = create_system_prompt(user_data[user_id])

        t_system = count_tokens(prompt_system)
        insert_tokenizer_info(db_conn, user_data[user_id],
                              prompt_system, t_system)
        logging.warning(f"Count tokens: user={user_id}, t_system={t_system}")
        user_data[user_id]['collection'].append(
            {
                "role": "system",
                "content": prompt_system,
            }
        )
        logging.info("Adding system prompt")
        insert_prompt(db_conn,
                      user_data[user_id],
                      "system",
                      prompt_system,
                      t_system)



    prompt_user = prompt_user_prefix + m.text
    t = count_tokens(prompt_user)

    insert_tokenizer_info(db_conn, user_data[user_id],
                          prompt_user, t)
    logging.warning(
        f"Count tokens: user={user_id}, t={t}, content={prompt_user}")

    if is_limit_tokens_in_session(db_conn, user_data[user_id], t):
        bot.send_message(
            user_id,
            f'–û–®–ò–ë–ö–ê\n'
            f'–¢–æ–∫–µ–Ω–∞–π–∑–µ—Ä –Ω–∞—Å—á–∏—Ç–∞–ª —Ç–æ–∫–µ–Ω–æ–≤ (FAKE): {t}\n'
            f'–≠—Ç–æ –±–æ–ª—å—à–µ, —á–µ–º –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Å–µ—Å—Å–∏–∏. '
            f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å.', reply_markup=markup_generate)
        logging.warning(f"Not enough tokens ({t}): user_id={user_id}")
        bot.register_next_step_handler(m, handle_ask_gpt)
        return

    user_data[user_id]['collection'].append(
        {
            "role": "user",
            "content": prompt_user,
        }
    )
    logging.info("Adding user prompt")
    insert_prompt(db_conn,
                  user_data[user_id],
                  "user",
                  prompt_user,
                  t)

    res_gpt = ask_gpt(user_data[user_id])
    print(res_gpt)
    t_res = count_tokens(res_gpt)
    insert_tokenizer_info(db_conn, user_data[user_id],
                          res_gpt, t_res)
    user_data[user_id]['collection'].append(
        {
            "role": "assistant",
            "content": res_gpt,
        }
    )
    logging.info("Adding user prompt")
    insert_prompt(db_conn,
                  user_data[user_id],
                  "assistant",
                  res_gpt,
                  t_res)

    bot.send_message(
        user_id,
        f'–û—Ç–≤–µ—Ç –æ—Ç GPT:\n\n'
        f'{res_gpt}', reply_markup=markup_generate)
    bot.register_next_step_handler(m, handle_ask_gpt)


bot.infinity_polling()
db_conn.close()
